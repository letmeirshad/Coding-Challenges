const express = require('express');
const axios = require('axios');

const app = express();
const port = 3000;

// Search endpoint
app.get('/search', async (req, res) => {
  try {
    //const query = req.query.query;

    // Make requests to the two different APIs
    const api1Response = await axios.get(`https://storage.googleapis.com/scratchpay-code-challenge/dental-clinics.josn`);
    const api2Response = await axios.get(`https://storage.googleapis.com/scratchpay-code-challenge/vet-clinics.json`);

    console.log(api1Response)
    console.log(api2Response)

    // Process and combine the results from both APIs
    const results = api1Response.data.results.concat(api2Response.data.results);

    res.json({ results });
  } catch (error) {
    res.status(500).json({ error: 'An error occurred' });
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});


====================================================================================================================

const express = require('express');
const app = express();

// Define sample clinic data
const clinics = [
  {
      "name":"Good Health Home",
      "stateName":"Alaska",
      "availability":{
         "from":"10:00",
         "to":"19:30"
      }
   },
   {
      "name":"Mayo Clinic",
      "stateName":"Florida",
      "availability":{
         "from":"09:00",
         "to":"20:00"
      }
   },
   {
      "name":"Cleveland Clinic",
      "stateName":"New York",
      "availability":{
         "from":"11:00",
         "to":"22:00"
      }
   }
];

// Define the search endpoint
app.get('/clinics', (req, res) => {
  const { name, state, availability_from, availability_to } = req.query;

  // Perform the search based on the provided criteria
  const results = clinics.filter(clinic => {
    if (name && !clinic.name.toLowerCase().includes(name.toLowerCase())) {
      return false;
    }
    if (state && !clinic.state.toLowerCase().includes(state.toLowerCase())) {
      return false;
    }
    if (availability_from && clinic.availability.from < availability_from) {
      return false;
    }
    if (availability_to && clinic.availability.to > availability_to) {
      return false;
    }
    return true;
  });

  //test Codes
  if (availability_to) {
        results = results.filter(clinic =>
            clinic.availability !== undefined ?
                isClinicAvailable(clinic.availability, availability) :
                isClinicAvailable(clinic.opening, availability)
        );
    }

  // Return the search results
  res.json({ results });
});

// Helper function to check clinic timeslot availability
function isClinicAvailable(clinicAvailability, searchAvailability) {
    const { from, to } = clinicAvailability;
    const { from: searchFrom, to: searchTo } = searchAvailability;

    // Compare the time ranges
    return (from <= searchFrom && to >= searchTo);
}

// Start the server
app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
